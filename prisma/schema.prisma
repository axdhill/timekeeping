generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  EMPLOYEE
  MANAGER
  ADMIN
}

enum TimesheetStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  password        String
  firstName       String
  lastName        String
  role            UserRole         @default(EMPLOYEE)
  managerId       String?
  manager         User?            @relation("ManagerToEmployee", fields: [managerId], references: [id])
  employees       User[]           @relation("ManagerToEmployee")
  projectAssignments ProjectAssignment[]
  timeEntries     TimeEntry[]
  timesheets      Timesheet[]
  approvedSheets  Timesheet[]      @relation("ApprovedBy")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Project {
  id              String           @id @default(uuid())
  code            String           @unique
  name            String
  description     String?
  active          Boolean          @default(true)
  assignments     ProjectAssignment[]
  timeEntries     TimeEntry[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model ProjectAssignment {
  id              String           @id @default(uuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  projectId       String
  project         Project          @relation(fields: [projectId], references: [id])
  startDate       DateTime         @default(now())
  endDate         DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([userId, projectId])
}

model Timesheet {
  id              String           @id @default(uuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  weekStartDate   DateTime
  weekEndDate     DateTime
  status          TimesheetStatus  @default(DRAFT)
  submittedAt     DateTime?
  approvedAt      DateTime?
  approvedById    String?
  approvedBy      User?            @relation("ApprovedBy", fields: [approvedById], references: [id])
  comments        String?
  timeEntries     TimeEntry[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([userId, weekStartDate])
}

model TimeEntry {
  id              String           @id @default(uuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  projectId       String
  project         Project          @relation(fields: [projectId], references: [id])
  timesheetId     String
  timesheet       Timesheet        @relation(fields: [timesheetId], references: [id])
  date            DateTime
  hours           Float
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([userId, projectId, date])
}